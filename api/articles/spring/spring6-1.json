{"title":"Spring6-注入方式","uid":"451e8b3038f6c87fffb50c6a654b133c","slug":"spring/spring6-1","date":"2023-01-12T00:51:17.000Z","updated":"2023-02-06T05:28:55.849Z","comments":true,"path":"api/articles/spring/spring6-1.json","keywords":null,"cover":"/img/spring/OG-Spring.png","content":"<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">内容来源</p>\n<p>基于Oracle openJDK 17 ， Spring6\n</div>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>个人学习习惯，视频入门，书本精进。内容来自于视频讲解内容以及个人总结理解。</p></blockquote>\n<h1 id=\"OCP开闭原则\"><a href=\"#OCP开闭原则\" class=\"headerlink\" title=\"OCP开闭原则\"></a>OCP开闭原则</h1><ul>\n<li>在使用Spring中，Service层可能由如下实现，这样就规定死了<code>userDao</code>的真实类型的<code>UserDaoMysqlImpl</code>，在之后的系统升级维护中，若更改为其他的数据库，则必须手动更改Imple实现类。那么这样就会造成对项目源码的更改，这样的违背OCP开闭原则的。这个原则意思是<strong>对扩展开放，对修改关闭</strong>，即在维护升级中可以新建类等操作，但是不允许进行修改源代码。</li>\n<li>下面的代码也使得Service层的实现完全依赖与底层Impl的实现。这样的更改下层而牵动上层的设计，违背了<strong>DIP依赖倒置</strong>原则。</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">UserDao  userDao &#x3D; new UserDaoMysqlImple();</code></pre>\n\n<h1 id=\"DIP依赖倒置\"><a href=\"#DIP依赖倒置\" class=\"headerlink\" title=\"DIP依赖倒置\"></a>DIP依赖倒置</h1><ul>\n<li>DIP主要倡导面向抽象编程，面向接口编程，不要面向具体编程，让上层不再依赖下层，下面改动了，上面的代码不会受到牵连，目的是解耦，增加内聚。</li>\n<li>上面的代码段是面向具体编程了，在代码编写的时候就直接规定死了UserDao的实现类，Spring中的IoC就是来解决这个问题的。</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;*与上面代码不同的是，这段代码若结合Spring使用，userDao的对象完全由Spring来注入，userDao的实现完全由配置决定，\n则面向接口编程意思就是我们只需要关注接口中的方法即可，而无需考虑实现类的具体实现。*&#x2F;\nUserDao  userDao;\npublic User findById(id) &#123;\n  return userDao.findById(Id);\n&#125;\n</code></pre>\n\n\n<h1 id=\"两个问题\"><a href=\"#两个问题\" class=\"headerlink\" title=\"两个问题\"></a>两个问题</h1><ul>\n<li>不让面向具体编程，不让自己<code>new</code>对象出来，那么怎么创建对象？<ul>\n<li><code>Spring</code>通过创建<code>Bean</code>的方式，通过用户配置，来创建需要的对象<code>Bean</code>。通过这样的方式，若以后项目升级维护，更改操作，则通过更改配置文件即可，而不用更改源码，解决掉了之前的OCP问题。</li>\n</ul>\n</li>\n<li>当类初始化后，不让<code>new</code>对象赋值，则<code>userDao</code>对象被使用会发生空指针怎么办？<ul>\n<li>同样是交由<code>Spring</code>进行管理，一样是通过配置文件的方法告诉<code>Spring</code>，<code>userDao</code>该如何赋值。这样通过面向接口编程，则有效解决了DIP问题。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"控制反转IoC\"><a href=\"#控制反转IoC\" class=\"headerlink\" title=\"控制反转IoC\"></a>控制反转IoC</h1><ul>\n<li>这是上面的总结下来的思想，之前我们的对象都是主动在程序中new创建出来的，而现在我们反过来，将对象的创建和对象间的管理权限全部交由Spring来管理维护，再由Spring将对象注入到配置好的位置。这样反过来的操作可以理解为IoC。</li>\n<li>IoC算是一种思想方法，而在Spring的实现中是通过配置好后，Spring进行依赖注入，依赖注入又称<strong>DI</strong>，DI的实现方式主要有<ul>\n<li>构造注入</li>\n<li>setter注入</li>\n</ul>\n</li>\n<li>结合之前学习的Java基础，则两种注入方法存在本质的不同，构造方法是在对象初始化，当对象的变量都分配好空间和默认值之后，构造方法开始对变量的内容进行初始化。而setter注入是在初始化完毕后，对象已经创建完毕后，setter注入才可以开始工作，两种方式初始化的时机是不一样的。</li>\n</ul>\n<details class=\"custom-details\">\n<summary>pom.xml</summary>\n<p><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;\n        &lt;artifactId&gt;spring-context&lt;&#x2F;artifactId&gt;\n        &lt;version&gt;6.0.3&lt;&#x2F;version&gt;\n    &lt;&#x2F;dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.junit.jupiter&lt;&#x2F;groupId&gt;\n        &lt;artifactId&gt;junit-jupiter&lt;&#x2F;artifactId&gt;\n        &lt;version&gt;5.6.3&lt;&#x2F;version&gt;\n    &lt;&#x2F;dependency&gt;\n&lt;&#x2F;dependencies&gt;</code></pre>\n</p>\n</details>\n<h1 id=\"getBean\"><a href=\"#getBean\" class=\"headerlink\" title=\"getBean\"></a>getBean</h1><ul>\n<li>当在配置文件中配置了之后，可以通过三种方式得到SPring为我们初始化好的Bean</li>\n</ul>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!-- getBean时会返回userDao，而不会返回另一个。 --&gt;\n&lt;bean id&#x3D;&quot;userDao&quot; class&#x3D;&quot;cn.ohbug.UserDao&quot; primary&#x3D;&quot;true&quot;&#x2F;&gt;\n&lt;bean id&#x3D;&quot;userDao1&quot; class&#x3D;&quot;cn.ohbug.UserDao&quot;&#x2F;&gt;</code></pre>\n<br/>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">UserDao bean &#x3D; context.getBean(UserDao.class);\nUserDao bean &#x3D; (UserDao) context.getBean(&quot;userDap&quot;);\nUserDao bean &#x3D; context.getBean(&quot;userDao&quot;, UserDao.class);</code></pre>\n\n<ul>\n<li><p>若配置文件中有重复的Bean配置，则使用第一种getBean的方式要报错，要在配置文件中配置重复Bean的主次即可。</p>\n</li>\n<li><p>若 UserDao为一个接口，配置文件中有，这样的情况会怎么样？当仅有一个实现类Bean时，默认会取出来加以执行，若有两个及以上实现类，则依旧采用<code>primary</code> 配置主次即可。</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;bean id&#x3D;&quot;manDao&quot; class&#x3D;&quot;cn.ohbug.ManDao&quot; primary&#x3D;&quot;true&quot;&#x2F;&gt;\n&lt;bean id&#x3D;&quot;womanDao&quot; class&#x3D;&quot;cn.ohbug.WomanDao&quot; &#x2F;&gt;</code></pre>\n\n<br/>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public interface UserDao &#123;\n    public void say() ;\n&#125;\npublic class ManDao implements UserDao&#123;\n    @Override\n    public void say() &#123;\n        System.out.println(&quot;i&#39;m a man&quot;);\n    &#125;\n&#125;\npublic class WomanDao implements UserDao&#123;\n    @Override\n    public void say() &#123;\n        System.out.println(&quot;i&#39;m a woman&quot;);\n    &#125;\n&#125;</code></pre>\n\n<h1 id=\"案例程序：setter注入\"><a href=\"#案例程序：setter注入\" class=\"headerlink\" title=\"案例程序：setter注入\"></a>案例程序：setter注入</h1><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;Java程序\npublic class User &#123;\n    public User(String name, int id) &#123;\n        this.name &#x3D; name;\n        this.id &#x3D; id;\n        System.out.println(&quot;User(name,id) constructor init...&quot;);\n    &#125;\n    public User() &#123;\n        System.out.println(&quot;User() constructor init...&quot;);\n    &#125;\n    @Override\n    public String toString() &#123;\n        return &quot;User&#123;&quot; +\n                &quot;name&#x3D;&#39;&quot; + name + &#39;\\&#39;&#39; +\n                &quot;, id&#x3D;&quot; + id +\n                &#39;&#125;&#39;;\n    &#125;\n    private String name;\n    private int id;\n&#125;\n\npublic class UserService &#123;\n    public UserService() &#123;\n        System.out.println(&quot;UserService() constructor init...&quot;);\n    &#125;\n    private UserDao userDao;\n    public void setUserDao(UserDao userDao) &#123;\n        this.userDao &#x3D; userDao;\n    &#125;\n    public User getUserById(int i) &#123;\n        return userDao.getUserById(i);\n    &#125;\n&#125;\npublic class UserDao &#123;\n    public UserDao() &#123;\n        System.out.println(&quot;UserDao() constructor init...&quot;);\n    &#125;\n    public User getUserById(int i) &#123;\n        return new User(&quot;Qidai&quot;,i);\n    &#125;\n&#125;\n&#x2F;&#x2F;use\n@Test\npublic void test() &#123;\n    ApplicationContext context &#x3D; new ClassPathXmlApplicationContext(&quot;spring-config.xml&quot;);\n    UserService service &#x3D; context.getBean(&quot;userService&quot;, UserService.class);\n    User user &#x3D; service.getUserById(1);\n    System.out.println(user);\n\n&#125;\n&#x2F;&#x2F;out\nUserDao() constructor init...\nUserService() constructor init...\nUser(name,id) constructor init...\nUser&#123;name&#x3D;&#39;Qidai&#39;, id&#x3D;1&#125;</code></pre>\n\n<ul>\n<li>下面是Spring配置文件</li>\n</ul>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;bean id&#x3D;&quot;dao&quot; class&#x3D;&quot;cn.ohbug.UserDao&quot; primary&#x3D;&quot;true&quot;&#x2F;&gt;\n&lt;bean id&#x3D;&quot;userService&quot; class&#x3D;&quot;cn.ohbug.UserService&quot;&gt;\n    &lt;property name&#x3D;&quot;userDao&quot; ref&#x3D;&quot;dao&quot;&#x2F;&gt;\n&lt;&#x2F;bean&gt;</code></pre>\n<ul>\n<li>配置文件的解释<ul>\n<li>spring-config.xml为Spring全局配置文件，放置于项目根目录下。配置文件中<code>&lt;bean id=&quot;userDao&quot; class=&quot;org.example.UserDao&quot;/&gt;</code>就是告诉Spring要new一个这个对象，交由Spring管理，<code>id</code>在xml中唯一，<code>class</code>是对应的类路径。</li>\n<li>第二个bean作用与上面<code>userDao</code>的配置一样，但是里面的<code>property</code>是告诉Spring，要使用setter方式将<code>ref</code>引用的<code>id</code>为<code>dao</code>的创建好的bean通过<code>UserService</code>类中叫做<code>setUserDao</code>的方法注入到<code>UserService</code>中的实例未赋值的变量<code>userDao</code>中。即若使用setter方法注入，我们就必须为成员变量设置一个set方法，<code>property</code>中的<code>name</code>是这个方法名去掉<code>set</code>后首字母小写值，假如一个方法名为<code>setQidai</code>，若要使用<code>name</code>，则那么<code>name</code>值为<code>qidai</code>，就是这样一种约定，如上java代码中，<code>UserService</code>中有一个<code>setUserDao</code>方法，则此处的<code>name</code>就为<code>userDao</code>，<code>ref</code>就是寻找<code>xml</code>中<code>id</code>为<code>dao</code>的<code>bean</code>，然后通过编写的setter方法进行赋值。</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/img/spring/spring6/1-1.png\"></p>\n<ul>\n<li>看到输出，那么究竟发生了什么？<ul>\n<li>当测试程序运行了   <code> ApplicationContext context = new ClassPathXmlApplicationContext(&quot;spring-config.xml&quot;);</code>则Spring就已经将UserDao和UserService初始化，并输出了初始化信息，此时我们知道了Spring bean的创建是通过无参构造进行的。若Bean中没有无参构造则报错。原理是利用了反射。</li>\n<li>创建好的对象交由Spring管理，Spring放入了一个Map中进行存储，当使用context.getBean(…)时，参数其实是Map中的key。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"构造器注入\"><a href=\"#构造器注入\" class=\"headerlink\" title=\"构造器注入\"></a>构造器注入</h1><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class ManDao &#123;\n    public void say() &#123;\n        System.out.println(&quot;i&#39;m a man&quot;);\n    &#125;\n&#125;\npublic class WomanDao&#123;\n    public void say() &#123;\n        System.out.println(&quot;i&#39;m a woman&quot;);\n    &#125;\n&#125;\npublic class PersonService &#123;\n    private ManDao manDao;\n    private WomanDao womanDao;\n\n    public PersonService(ManDao manDao, WomanDao womanDao) &#123;\n        this.manDao &#x3D; manDao;\n        this.womanDao &#x3D; womanDao;\n    &#125;\n\n    public void say() &#123;\n        manDao.say();\n        womanDao.say();\n    &#125;\n&#125;\n    @Test\n    public void test() &#123;\n        ApplicationContext context &#x3D; new ClassPathXmlApplicationContext(&quot;spring-config.xml&quot;);\n        PersonService bean &#x3D; context.getBean(PersonService.class);\n        bean.say();\n    &#125;</code></pre>\n\n<br/>\n\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;bean id&#x3D;&quot;manDao&quot; class&#x3D;&quot;cn.ohbug.ManDao&quot; primary&#x3D;&quot;true&quot;&#x2F;&gt;\n&lt;bean id&#x3D;&quot;womanDao&quot; class&#x3D;&quot;cn.ohbug.WomanDao&quot; &#x2F;&gt;\n&lt;bean class&#x3D;&quot;cn.ohbug.PersonService&quot; id&#x3D;&quot;personService&quot;&gt;\n    &lt;constructor-arg name&#x3D;&quot;manDao&quot; ref&#x3D;&quot;manDao&quot;&#x2F;&gt;\n    &lt;constructor-arg name&#x3D;&quot;womanDao&quot; ref&#x3D;&quot;womanDao&quot;&#x2F;&gt;\n&lt;&#x2F;bean&gt;</code></pre>\n\n<ul>\n<li><code>name</code> 指定 <code>PersonService</code> 中待注入的变量名，<code>ref</code> 为 配置文件中配置好的<code>bean</code>的<code>id</code>。</li>\n</ul>\n<h1 id=\"set注入\"><a href=\"#set注入\" class=\"headerlink\" title=\"set注入\"></a>set注入</h1><h2 id=\"简单类型\"><a href=\"#简单类型\" class=\"headerlink\" title=\"简单类型\"></a>简单类型</h2><ul>\n<li><code>BeanUtils.isSimpleValueType</code> 方法可以知道，简单类型包括：基本数据类型及包装类，枚举类，字符串，数字，时间，URI，Class 类型。</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F; 引入lombok插件\n@Data\n@ToString\npublic class User &#123;\n    private String name;\n    private int age;\n    private Class aClass;\n&#125;</code></pre>\n\n<br/>\n\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;bean id&#x3D;&quot;user&quot; class&#x3D;&quot;cn.ohbug.User&quot;&gt;\n    &lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;qidai&quot;&#x2F;&gt;\n    &lt;property name&#x3D;&quot;age&quot; value&#x3D;&quot;24&quot;&#x2F;&gt;\n    &lt;property name&#x3D;&quot;AClass&quot; value&#x3D;&quot;cn.ohbug.User&quot;&#x2F;&gt;\n&lt;&#x2F;bean&gt;</code></pre>\n\n<h2 id=\"级联注入\"><a href=\"#级联注入\" class=\"headerlink\" title=\"级联注入\"></a>级联注入</h2><ul>\n<li>即一个对象内的引用对象的内容注入。需要注意的是外部对象<code>User</code>需要提供内部引用对象<code>Info</code>的<code>getter</code>方法。在执行的时候，会调用<code>User.getInfo</code> 方法后赋值。</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Data\n@ToString\npublic class User &#123;\n    private String name;\n    private int age;\n    private Info info;\n&#125;\n@Data\npublic class Info &#123;\n    private String phone;\n    private String address;\n&#125;</code></pre>\n<br/>\n\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;bean id&#x3D;&quot;infoBean&quot; class&#x3D;&quot;cn.ohbug.Info&quot;&#x2F;&gt;\n&lt;bean id&#x3D;&quot;user&quot; class&#x3D;&quot;cn.ohbug.User&quot;&gt;\n    &lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;qidai&quot;&#x2F;&gt;\n    &lt;property name&#x3D;&quot;age&quot; value&#x3D;&quot;24&quot;&#x2F;&gt;\n    &lt;property name&#x3D;&quot;info&quot; ref&#x3D;&quot;infoBean&quot;&#x2F;&gt;\n    &lt;property name&#x3D;&quot;info.address&quot; value&#x3D;&quot;tangshan&quot;&#x2F;&gt;\n    &lt;property name&#x3D;&quot;info.phone&quot; value&#x3D;&quot;18888888888&quot;&#x2F;&gt;\n&lt;&#x2F;bean&gt;</code></pre>\n\n<h2 id=\"数组注入\"><a href=\"#数组注入\" class=\"headerlink\" title=\"数组注入\"></a>数组注入</h2><h3 id=\"简单类型-1\"><a href=\"#简单类型-1\" class=\"headerlink\" title=\"简单类型\"></a>简单类型</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Data\n@ToString\npublic class User &#123;\n    private String[] names;\n&#125;\n</code></pre>\n<br/>\n\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;bean id&#x3D;&quot;user&quot; class&#x3D;&quot;cn.ohbug.User&quot;&gt;\n    &lt;property name&#x3D;&quot;names&quot;&gt;\n        &lt;array&gt;\n            &lt;value&gt;qidai&lt;&#x2F;value&gt;\n            &lt;value&gt;ohbug.cn&lt;&#x2F;value&gt;\n        &lt;&#x2F;array&gt;\n    &lt;&#x2F;property&gt;\n&lt;&#x2F;bean&gt;</code></pre>\n<h3 id=\"引用类型\"><a href=\"#引用类型\" class=\"headerlink\" title=\"引用类型\"></a>引用类型</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Data\npublic class Company &#123;\n    private User[] users;\n&#125;\n@Data\n@ToString\npublic class User &#123;\n    private String name;\n&#125;</code></pre>\n<br/>\n\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;bean id&#x3D;&quot;user1&quot; class&#x3D;&quot;cn.ohbug.User&quot;&gt;\n    &lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;qidai&quot;&#x2F;&gt;\n&lt;&#x2F;bean&gt;\n&lt;bean id&#x3D;&quot;user2&quot; class&#x3D;&quot;cn.ohbug.User&quot;&gt;\n    &lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;ohbug.cn&quot;&#x2F;&gt;\n&lt;&#x2F;bean&gt;\n&lt;bean id&#x3D;&quot;company&quot; class&#x3D;&quot;cn.ohbug.Company&quot;&gt;\n    &lt;property name&#x3D;&quot;users&quot;&gt;\n        &lt;array&gt;\n            &lt;ref bean&#x3D;&quot;user1&quot;&#x2F;&gt;\n            &lt;ref bean&#x3D;&quot;user2&quot;&#x2F;&gt;\n        &lt;&#x2F;array&gt;\n    &lt;&#x2F;property&gt;\n&lt;&#x2F;bean&gt;</code></pre>\n\n\n\n<h2 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h2><ul>\n<li>注入List集合的时候使用list标签，如果List集合中是简单类型使用value标签，反之使用ref标签。</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Data\n@ToString\npublic class Company &#123;\n    private List&lt;User&gt;[] users;\n&#125;\n@Data\n@ToString\npublic class User &#123;\n    private String name;\n&#125;</code></pre>\n<br/>\n\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;bean id&#x3D;&quot;user1&quot; class&#x3D;&quot;cn.ohbug.User&quot;&gt;\n    &lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;qidai&quot;&#x2F;&gt;\n&lt;&#x2F;bean&gt;\n&lt;bean id&#x3D;&quot;user2&quot; class&#x3D;&quot;cn.ohbug.User&quot;&gt;\n    &lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;ohbug.cn&quot;&#x2F;&gt;\n&lt;&#x2F;bean&gt;\n&lt;bean id&#x3D;&quot;company&quot; class&#x3D;&quot;cn.ohbug.Company&quot;&gt;\n    &lt;property name&#x3D;&quot;users&quot;&gt;\n        &lt;list&gt;\n            &lt;ref bean&#x3D;&quot;user1&quot;&#x2F;&gt;\n            &lt;ref bean&#x3D;&quot;user2&quot;&#x2F;&gt;\n        &lt;&#x2F;list&gt;\n    &lt;&#x2F;property&gt;\n&lt;&#x2F;bean&gt;</code></pre>\n\n\n\n<h2 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h2><ul>\n<li>与List注入一样。</li>\n</ul>\n<h2 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h2><ul>\n<li>如果key是简单类型，使用<code>key</code>属性，反之使用 <code>key-ref</code> 属性，如果value是简单类型，使用 <code>value</code> 属性，反之使用 <code>value-ref</code> 属性。</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n@Data\n@ToString\npublic class Company &#123;\n    private Map&lt;Integer, User&gt; user;\n&#125;\n&#x2F;&#x2F; User同List一样</code></pre>\n<br/>\n\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;bean id&#x3D;&quot;user1&quot; class&#x3D;&quot;cn.ohbug.User&quot;&gt;\n    &lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;qidai&quot;&#x2F;&gt;\n&lt;&#x2F;bean&gt;\n&lt;bean id&#x3D;&quot;user2&quot; class&#x3D;&quot;cn.ohbug.User&quot;&gt;\n    &lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;ohbug.cn&quot;&#x2F;&gt;\n&lt;&#x2F;bean&gt;\n&lt;bean id&#x3D;&quot;company&quot; class&#x3D;&quot;cn.ohbug.Company&quot;&gt;\n    &lt;property name&#x3D;&quot;user&quot;&gt;\n        &lt;map&gt;\n            &lt;entry key&#x3D;&quot;1&quot; value-ref&#x3D;&quot;user1&quot;&#x2F;&gt;\n            &lt;entry key&#x3D;&quot;2&quot; value-ref&#x3D;&quot;user2&quot;&#x2F;&gt;\n        &lt;&#x2F;map&gt;\n    &lt;&#x2F;property&gt;\n&lt;&#x2F;bean&gt;</code></pre>\n\n\n\n\n\n<h2 id=\"Properties\"><a href=\"#Properties\" class=\"headerlink\" title=\"Properties\"></a>Properties</h2><ul>\n<li>一样是Map结构，但是标签使用的是props嵌套prop实现。<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Data\n@ToString\npublic class Company &#123;\n    private Properties properties;\n&#125;\n</code></pre>\n<br/></li>\n</ul>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;bean id&#x3D;&quot;company&quot; class&#x3D;&quot;cn.ohbug.Company&quot;&gt;\n    &lt;property name&#x3D;&quot;properties&quot;&gt;\n        &lt;props&gt;\n            &lt;prop key&#x3D;&quot;cname&quot;&gt; ohbug.cn&lt;&#x2F;prop&gt;\n            &lt;prop key&#x3D;&quot;owner&quot;&gt; qidai &lt;&#x2F;prop&gt;\n        &lt;&#x2F;props&gt;\n    &lt;&#x2F;property&gt;\n&lt;&#x2F;bean&gt;</code></pre>\n\n\n\n\n\n<h1 id=\"命名空间注入\"><a href=\"#命名空间注入\" class=\"headerlink\" title=\"命名空间注入\"></a>命名空间注入</h1><ul>\n<li>是为了简化配置的。</li>\n</ul>\n<h2 id=\"C命名空间\"><a href=\"#C命名空间\" class=\"headerlink\" title=\"C命名空间\"></a>C命名空间</h2><ul>\n<li>将bean配置文件的文件头更改，主要用于构造注入.</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@ToString\n@AllArgsConstructor\n@NoArgsConstructor\npublic class Company &#123;\n    private String companyName;\n    private User owner;\n&#125;\n</code></pre>\n<br/>\n\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;\n       xmlns:c&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;c&quot;  &lt;!--  新加入的 --&gt;\n       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd&quot;&gt;\n    &lt;bean id&#x3D;&quot;user1&quot; class&#x3D;&quot;cn.ohbug.User&quot;&gt;\n        &lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;qidai&quot;&#x2F;&gt;\n    &lt;&#x2F;bean&gt;\n    &lt;bean id&#x3D;&quot;company&quot; class&#x3D;&quot;cn.ohbug.Company&quot; c:companyName&#x3D;&quot;ohbug.cn&quot; c:owner-ref&#x3D;&quot;user1&quot;&#x2F;&gt;\n&lt;&#x2F;beans&gt;</code></pre>\n\n\n<h2 id=\"P命名空间\"><a href=\"#P命名空间\" class=\"headerlink\" title=\"P命名空间\"></a>P命名空间</h2><ul>\n<li>将bean配置文件的文件头更改，主要用于简化变量注入.<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Data\n@ToString\npublic class Company &#123;\n    private String companyName;\n    private User owner;\n&#125;\n    @Data\n    @ToString\n    public class User &#123;\n        private String name;\n    &#125;</code></pre>\n<br/></li>\n</ul>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">\n&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;\n       xmlns:p&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;p&quot; &lt;!--  新加入的 --&gt;\n       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd&quot;&gt;\n    &lt;bean id&#x3D;&quot;user1&quot; class&#x3D;&quot;cn.ohbug.User&quot;&gt;\n        &lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;qidai&quot;&#x2F;&gt;\n    &lt;&#x2F;bean&gt;\n    &lt;bean id&#x3D;&quot;company&quot; class&#x3D;&quot;cn.ohbug.Company&quot; p:companyName&#x3D;&quot;ohbug.cn&quot; p:owner-ref&#x3D;&quot;user1&quot;&#x2F;&gt;\n&lt;&#x2F;beans&gt;</code></pre>\n\n<h2 id=\"util配置复用\"><a href=\"#util配置复用\" class=\"headerlink\" title=\"util配置复用\"></a>util配置复用</h2><ul>\n<li>若配置文件中反复使用一个配置,则可以将这个配置信息提出来,用util的办法加以复用.</li>\n<li>如下将两个UserBean打包成一个方便Company中ref使用.<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n@Data\npublic class User &#123;\n    private String name;\n&#125;\n@Data\npublic class Company &#123;\n    private String companyName;\n    private List&lt;User&gt; users;\n&#125;\n</code></pre>\n<br/></li>\n</ul>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;bean id&#x3D;&quot;user1&quot; class&#x3D;&quot;cn.ohbug.User&quot; p:name&#x3D;&quot;zhangsan&quot;&#x2F;&gt;\n&lt;bean id&#x3D;&quot;user2&quot; class&#x3D;&quot;cn.ohbug.User&quot; p:name&#x3D;&quot;lisi&quot;&#x2F;&gt;\n&lt;util:list id&#x3D;&quot;users&quot; value-type&#x3D;&quot;cn.ohbug.User&quot;&gt;\n    &lt;ref bean&#x3D;&quot;user1&quot;&#x2F;&gt;\n    &lt;ref bean&#x3D;&quot;user2&quot;&#x2F;&gt;\n&lt;&#x2F;util:list&gt;\n&lt;bean id&#x3D;&quot;company&quot; class&#x3D;&quot;cn.ohbug.Company&quot;&gt;\n    &lt;property name&#x3D;&quot;companyName&quot; value&#x3D;&quot;xxx&quot;&#x2F;&gt;\n    &lt;property name&#x3D;&quot;users&quot; ref&#x3D;&quot;users&quot;&#x2F;&gt;\n&lt;&#x2F;bean&gt;</code></pre>\n\n\n<h1 id=\"自动注入\"><a href=\"#自动注入\" class=\"headerlink\" title=\"自动注入\"></a>自动注入</h1><ul>\n<li>无论是根据名字还是根据类型,都是调用的set方法注入的.</li>\n</ul>\n<h2 id=\"按其名字\"><a href=\"#按其名字\" class=\"headerlink\" title=\"按其名字\"></a>按其名字</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Data\npublic class User &#123;\n    private String name;\n&#125;\n@Data\npublic class Company &#123;\n    private String companyName;\n    private User user;\n&#125;</code></pre>\n<br/>\n\n<ul>\n<li><code>autowire=&quot;byName&quot;</code>说明按名字注入,因为<code>Company</code>中有一个<code>user</code>变量,其set方法名为<code>setUser(..)</code>,去掉<code>set</code>字样后小写开头为<code>user</code>,即为配置的<code>UserBean</code>的<code>id</code>,自动注入时,Spring会找<code>id</code>为<code>user</code>的Bean进行自动注入. 这是一种约定.<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;bean id&#x3D;&quot;user&quot; class&#x3D;&quot;cn.ohbug.User&quot; p:name&#x3D;&quot;Qidai&quot;&#x2F;&gt;\n&lt;bean id&#x3D;&quot;company&quot; class&#x3D;&quot;cn.ohbug.Company&quot; p:companyName&#x3D;&quot;ohbug.cn&quot; autowire&#x3D;&quot;byName&quot;&#x2F;&gt;</code></pre></li>\n</ul>\n<h2 id=\"按其类型\"><a href=\"#按其类型\" class=\"headerlink\" title=\"按其类型\"></a>按其类型</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F; 与上一样</code></pre>\n<br/>\n\n<ul>\n<li>当出现相同类型的多个Bean时,同样更可以通过 <code>primary</code> 来指定主要Bean对象.<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;bean id&#x3D;&quot;user1&quot; class&#x3D;&quot;cn.ohbug.User&quot; p:name&#x3D;&quot;Qidai&quot;&#x2F;&gt;\n&lt;bean id&#x3D;&quot;user2&quot; class&#x3D;&quot;cn.ohbug.User&quot; p:name&#x3D;&quot;Qidaix&quot; primary&#x3D;&quot;true&quot;&#x2F;&gt;\n&lt;bean id&#x3D;&quot;company&quot; class&#x3D;&quot;cn.ohbug.Company&quot; p:companyName&#x3D;&quot;ohbug.cn&quot; autowire&#x3D;&quot;byType&quot;&#x2F;&gt;</code></pre></li>\n</ul>\n<h1 id=\"加载外部配置文件\"><a href=\"#加载外部配置文件\" class=\"headerlink\" title=\"加载外部配置文件\"></a>加载外部配置文件</h1><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Data\npublic class DataSource &#123;\n    private String name;\n    private String passwd;\n&#125;\n</code></pre>\n\n<br/>\n\n<ul>\n<li>测试的properties文件内容如下</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">jdbc.name&#x3D;Qidai\njdbc.passwd&#x3D;123456</code></pre>\n\n<ul>\n<li>spring 配置中 加入了 context的配置和语法约束. 并用context标签来引入外部文件.</li>\n</ul>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;\n       xmlns:p&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;p&quot;\n       xmlns:util&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;util&quot;\n       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;   &lt;!-- 新加入 --&gt;\n       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd\n                           http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;util http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;util&#x2F;spring-util.xsd\n                           &lt;!-- 新加入--&gt;\n                           http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd&quot;&gt; \n    &lt;context:property-placeholder location&#x3D;&quot;dataSource.properties&quot;&#x2F;&gt;\n    &lt;bean id&#x3D;&quot;dataSource&quot; class&#x3D;&quot;cn.ohbug.DataSource&quot; p:name&#x3D;&quot;$&#123;jdbc.name&#125;&quot; p:passwd&#x3D;&quot;$&#123;jdbc.passwd&#125;&quot;&#x2F;&gt;\n&lt;&#x2F;beans&gt;</code></pre>\n\n\n\n\n\n\n\n\n\n","abstracts":"来自教学视频学习笔记。","text":"来自教学视频学习笔记。","link":"","photos":[],"count_time":{"symbolsCount":"19k","symbolsTime":"17 mins."},"categories":[{"name":"Spring6","slug":"Spring6","count":4,"path":"api/categories/Spring6.json"}],"tags":[{"name":"Spring6","slug":"Spring6","count":4,"path":"api/tags/Spring6.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#OCP%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99\"><span class=\"toc-text\">OCP开闭原则</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#DIP%E4%BE%9D%E8%B5%96%E5%80%92%E7%BD%AE\"><span class=\"toc-text\">DIP依赖倒置</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%A4%E4%B8%AA%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">两个问题</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%ACIoC\"><span class=\"toc-text\">控制反转IoC</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#getBean\"><span class=\"toc-text\">getBean</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%A1%88%E4%BE%8B%E7%A8%8B%E5%BA%8F%EF%BC%9Asetter%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">案例程序：setter注入</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%9E%84%E9%80%A0%E5%99%A8%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">构造器注入</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#set%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">set注入</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AE%80%E5%8D%95%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">简单类型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BA%A7%E8%81%94%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">级联注入</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">数组注入</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%80%E5%8D%95%E7%B1%BB%E5%9E%8B-1\"><span class=\"toc-text\">简单类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">引用类型</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#List\"><span class=\"toc-text\">List</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Set\"><span class=\"toc-text\">Set</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Map\"><span class=\"toc-text\">Map</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Properties\"><span class=\"toc-text\">Properties</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">命名空间注入</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#C%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4\"><span class=\"toc-text\">C命名空间</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#P%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4\"><span class=\"toc-text\">P命名空间</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#util%E9%85%8D%E7%BD%AE%E5%A4%8D%E7%94%A8\"><span class=\"toc-text\">util配置复用</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%8A%A8%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">自动注入</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8C%89%E5%85%B6%E5%90%8D%E5%AD%97\"><span class=\"toc-text\">按其名字</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8C%89%E5%85%B6%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">按其类型</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8A%A0%E8%BD%BD%E5%A4%96%E9%83%A8%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">加载外部配置文件</span></a></li></ol>","author":{"name":"Qidai","slug":"blog-author","avatar":"/img/v2-b98d05a15e22949b1a1c70d453fb71ed_720w.jpg","link":"/","description":"吃喝，死宅，折腾","socials":{"github":"https://github.com/ziqiang-wang-chn","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/291152218"},"mail":{"icon":"/svg/mail.svg","link":"mailto:ziqiang_wang_chn@163.com"},"rss":{"icon":"/svg/RSS.svg","link":"https://ohbug.cn/atom.xml"}}}},"mapped":true,"prev_post":{"title":"MySQL必知必会 {一}","uid":"8d49f1dff289c8a88e72afa0d38a120a","slug":"mysql/mysqlmustknow","date":"2023-01-16T13:08:37.000Z","updated":"2023-01-24T12:50:37.286Z","comments":true,"path":"api/articles/mysql/mysqlmustknow.json","keywords":null,"cover":"/img/mysql/mysqlmust.jpg","text":"以《MySQL必知必会》为纲，学习MySQL的常用操作的学习笔记。文中也会参考极客时间课程《MySQL实战45讲》。","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[{"name":"MySQL基础","slug":"MySQL基础","count":1,"path":"api/categories/MySQL基础.json"}],"tags":[{"name":"MySQL","slug":"MySQL","count":2,"path":"api/tags/MySQL.json"},{"name":"《MySQL必知必会》","slug":"《MySQL必知必会》","count":1,"path":"api/tags/《MySQL必知必会》.json"}],"author":{"name":"Qidai","slug":"blog-author","avatar":"/img/v2-b98d05a15e22949b1a1c70d453fb71ed_720w.jpg","link":"/","description":"吃喝，死宅，折腾","socials":{"github":"https://github.com/ziqiang-wang-chn","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/291152218"},"mail":{"icon":"/svg/mail.svg","link":"mailto:ziqiang_wang_chn@163.com"},"rss":{"icon":"/svg/RSS.svg","link":"https://ohbug.cn/atom.xml"}}}}},"next_post":{"title":"Java复习篇：继承，接口","uid":"a24485c2a08f5a5922225dff3c3d2ee2","slug":"java/basic/basicjava2","date":"2023-01-11T01:47:37.000Z","updated":"2023-02-02T10:06:34.937Z","comments":true,"path":"api/articles/java/basic/basicjava2.json","keywords":null,"cover":"/img/java/basicjava.jpg","text":"内容来自于自己的拓展总结，对知识点进行总结，不过多涉及基础语法，例如定义循环等。文中部分的引用的来源见文章开头。","link":"","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[{"name":"java基础","slug":"java基础","count":9,"path":"api/categories/java基础.json"}],"tags":[{"name":"java","slug":"java","count":9,"path":"api/tags/java.json"}],"author":{"name":"Qidai","slug":"blog-author","avatar":"/img/v2-b98d05a15e22949b1a1c70d453fb71ed_720w.jpg","link":"/","description":"吃喝，死宅，折腾","socials":{"github":"https://github.com/ziqiang-wang-chn","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/291152218"},"mail":{"icon":"/svg/mail.svg","link":"mailto:ziqiang_wang_chn@163.com"},"rss":{"icon":"/svg/RSS.svg","link":"https://ohbug.cn/atom.xml"}}}}}}