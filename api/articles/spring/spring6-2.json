{"title":"Spring6 - Bean","uid":"7de900b2cf533ef3e8fa2a5e99f915a4","slug":"spring/spring6-2","date":"2023-02-06T05:29:19.000Z","updated":"2023-02-06T16:04:10.686Z","comments":true,"path":"api/articles/spring/spring6-2.json","keywords":null,"cover":"/img/spring/OG-Spring.png","content":"<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">内容来源</p>\n<p>基于Oracle openJDK 17 ， Spring6\n</div>\n<h1 id=\"Bean的获取方式\"><a href=\"#Bean的获取方式\" class=\"headerlink\" title=\"Bean的获取方式\"></a>Bean的获取方式</h1><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Data\npublic class User &#123;\n    public User() &#123;\n        System.out.println(&quot;wucan&quot;);\n    &#125;\n    private String name;\n&#125;</code></pre>\n\n<h2 id=\"构造方法实例化\"><a href=\"#构造方法实例化\" class=\"headerlink\" title=\"构造方法实例化\"></a>构造方法实例化</h2><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;bean id&#x3D;&quot;user&quot; class&#x3D;&quot;cn.ohbug.User&quot; p:name&#x3D;&quot;Qidai&quot;&#x2F;&gt;</code></pre>\n\n<h2 id=\"简单工厂模式实例化\"><a href=\"#简单工厂模式实例化\" class=\"headerlink\" title=\"简单工厂模式实例化\"></a>简单工厂模式实例化</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Data\npublic class UserFactory &#123;\n    public static User get() &#123;\n        return new User();\n    &#125;\n&#125;</code></pre>\n\n<ul>\n<li>由于 <code>UserFactory </code>是中get是静态方法，所以可以直接在创建对象后直接通过<code>factory-method</code>调用方法，以返回User对象。</li>\n</ul>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;bean id&#x3D;&quot;user&quot; class&#x3D;&quot;cn.ohbug.UserFactory&quot; factory-method&#x3D;&quot;get&quot;&#x2F;&gt;</code></pre>\n\n<h2 id=\"factory-bean实例化\"><a href=\"#factory-bean实例化\" class=\"headerlink\" title=\"factory-bean实例化\"></a>factory-bean实例化</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Data\npublic class UserFactory &#123;\n    public User get() &#123;\n        return new User();\n    &#125;\n&#125;</code></pre>\n\n<ul>\n<li>与上面的简单工厂不同的是，这里是实例方法，实例方法的调用是依赖于对象的，所以要先将<code>UserFactory</code>的对象交予Spring管理，在配置调用此对象的方法。</li>\n</ul>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;bean id&#x3D;&quot;userFactory&quot; class&#x3D;&quot;cn.ohbug.UserFactory&quot; &#x2F;&gt;\n&lt;bean id&#x3D;&quot;user&quot; factory-bean&#x3D;&quot;userFactory&quot; factory-method&#x3D;&quot;get&quot;&#x2F;&gt;</code></pre>\n\n<h2 id=\"FactoryBean接口实例化\"><a href=\"#FactoryBean接口实例化\" class=\"headerlink\" title=\"FactoryBean接口实例化\"></a>FactoryBean接口实例化</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Data\npublic class UserFactory implements FactoryBean&lt;User&gt; &#123;\n    @Override\n    public User getObject() throws Exception &#123;\n        return new User();\n    &#125;\n    @Override\n    public Class&lt;?&gt; getObjectType() &#123;\n        return User.class;\n    &#125;\n&#125;</code></pre>\n\n<ul>\n<li>由于实现了接口并抽象方法，所以一定存在<code>getObject</code>方法，所以Spring会自动的调用<code>getObject</code>方法来获取返回对象。</li>\n</ul>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;bean id&#x3D;&quot;user&quot; class&#x3D;&quot;cn.ohbug.UserFactory&quot; &#x2F;&gt;</code></pre>\n\n<h1 id=\"Bean生命周期\"><a href=\"#Bean生命周期\" class=\"headerlink\" title=\"Bean生命周期\"></a>Bean生命周期</h1><p><img src=\"/img/spring/spring6/beanlife.png\" alt=\"picture 2\">  </p>\n<ul>\n<li>如上是Bean的整个生命周期的流程图，对于Aware相关结论这里列举了一些。下面为实现代码。</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n\n@ToString\npublic class User &#123;\n    private String name;\n    public User() &#123;\n        System.out.println(&quot;Bean实例化 无参&quot;);\n    &#125;\n\n    public void setName(String name) &#123;\n        System.out.println(&quot;Bean属性赋值&quot;);\n        this.name &#x3D; name;\n    &#125;\n    public void init() &#123;\n        System.out.println(&quot;初始化Bean&quot;);\n    &#125;\n\n    public void destroy() &#123;\n        System.out.println(&quot;销毁Bean&quot;);\n    &#125;\n&#125;\npublic class MyBeanPostProcess implements BeanPostProcessor, BeanNameAware, BeanClassLoaderAware, BeanFactoryAware, InitializingBean, DisposableBean &#123;\n    @Override\n    public void setBeanClassLoader(ClassLoader classLoader) &#123;\n        System.out.println(&quot;Bean的初始化方法之前 ：Bean是否实现了Aware相关接口 ： BeanClassLoaderAware.setBeanClassLoader&quot;);\n    &#125;\n    @Override\n    public void setBeanFactory(BeanFactory beanFactory) throws BeansException &#123;\n        System.out.println(&quot;Bean的初始化方法之前 ：Bean是否实现了Aware相关接口 ： BeanFactoryAware.setBeanFactory&quot;);\n    &#125;\n    @Override\n    public void setBeanName(String name) &#123;\n        System.out.println(&quot;Bean的初始化方法之前 ：Bean是否实现了Aware相关接口 ： BeanNameAware.setBeanName&quot;);\n    &#125;\n    @Override\n    public void afterPropertiesSet() throws Exception &#123;\n        System.out.println(&quot;Bean的初始化方法之后 ：Bean是否实现了InitializingBean接口 ：InitializingBean.afterPropertiesSet&quot;);\n    &#125;\n    @Override\n    public void destroy() throws Exception &#123;\n        System.out.println(&quot;是否实现DisposableBean接口 ： destroy&quot;);\n    &#125;\n    @Override\n    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException &#123;\n        System.out.println(&quot;-- 初始化Bean之前&quot;);\n        return BeanPostProcessor.super.postProcessBeforeInitialization(bean, beanName);\n    &#125;\n    @Override\n    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException &#123;\n        System.out.println(&quot;-- 初始化Bean之后&quot;);\n        return BeanPostProcessor.super.postProcessAfterInitialization(bean, beanName);\n    &#125;\n&#125;\n    @Test\n    public void test() &#123;\n        ClassPathXmlApplicationContext context &#x3D; new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);\n        User user &#x3D; context.getBean(&quot;user&quot;, User.class);\n        System.out.println(&quot;使用Bean &#x3D; &quot; + user);\n        context.close();\n    &#125;</code></pre>\n\n\n\n<br/>\n\n<ul>\n<li><code>destroy-method</code> 指定Bean的销毁方法， <code>init-method</code> 指定Bean的初始化方法。</li>\n</ul>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;bean class&#x3D;&quot;cn.ohbug.MyBeanPostProcess&quot;&#x2F;&gt;\n&lt;bean id&#x3D;&quot;user&quot; class&#x3D;&quot;cn.ohbug.User&quot; p:name&#x3D;&quot;Qidai&quot; destroy-method&#x3D;&quot;destroy&quot; init-method&#x3D;&quot;init&quot;&#x2F;&gt;</code></pre>\n\n<details class=\"custom-details\">\n<summary>console out</summary>\n<p><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">Bean的初始化方法之前 ：Bean是否实现了Aware相关接口 ： BeanNameAware.setBeanName\nBean的初始化方法之前 ：Bean是否实现了Aware相关接口 ： BeanClassLoaderAware.setBeanClassLoader\nBean的初始化方法之前 ：Bean是否实现了Aware相关接口 ： BeanFactoryAware.setBeanFactory\nBean的初始化方法之后 ：Bean是否实现了InitializingBean接口 ：InitializingBean.afterPropertiesSet\nBean实例化 无参\nBean属性赋值\n-- 初始化Bean之前\n初始化Bean\n-- 初始化Bean之后\n使用Bean &#x3D; User(name&#x3D;Qidai)\n销毁Bean\n是否实现DisposableBean接口 ： destroy</code></pre>\n</p>\n</details>\n","feature":true,"abstracts":"来自教学视频学习笔记。","text":"来自教学视频学习笔记。","link":"","photos":[],"count_time":{"symbolsCount":"4.8k","symbolsTime":"4 mins."},"categories":[{"name":"Spring6","slug":"Spring6","count":2,"path":"api/categories/Spring6.json"}],"tags":[{"name":"Spring6","slug":"Spring6","count":2,"path":"api/tags/Spring6.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Bean%E7%9A%84%E8%8E%B7%E5%8F%96%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">Bean的获取方式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95%E5%AE%9E%E4%BE%8B%E5%8C%96\"><span class=\"toc-text\">构造方法实例化</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%E5%AE%9E%E4%BE%8B%E5%8C%96\"><span class=\"toc-text\">简单工厂模式实例化</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#factory-bean%E5%AE%9E%E4%BE%8B%E5%8C%96\"><span class=\"toc-text\">factory-bean实例化</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#FactoryBean%E6%8E%A5%E5%8F%A3%E5%AE%9E%E4%BE%8B%E5%8C%96\"><span class=\"toc-text\">FactoryBean接口实例化</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\"><span class=\"toc-text\">Bean生命周期</span></a></li></ol>","author":{"name":"Qidai","slug":"blog-author","avatar":"/img/v2-b98d05a15e22949b1a1c70d453fb71ed_720w.jpg","link":"/","description":"吃喝，死宅，折腾","socials":{"github":"https://github.com/ziqiang-wang-chn","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/291152218"},"mail":{"icon":"/svg/mail.svg","link":"mailto:ziqiang_wang_chn@163.com"},"rss":{"icon":"/svg/RSS.svg","link":"https://ohbug.cn/atom.xml"}}}},"mapped":true,"prev_post":{},"next_post":{"title":"Java复习篇：I/O","uid":"29f930df39026468dc3eb2d13ae05591","slug":"java/basic/basicjava7","date":"2023-02-04T01:20:15.000Z","updated":"2023-02-05T08:53:03.460Z","comments":true,"path":"api/articles/java/basic/basicjava7.json","keywords":null,"cover":"/img/java/basicjava.jpg","text":"内容来自于自己的拓展总结，对知识点进行总结，不过多涉及基础语法，例如定义循环等。文中部分的引用的来源见文章开头。","link":"","photos":[],"count_time":{"symbolsCount":"5.1k","symbolsTime":"5 mins."},"categories":[{"name":"java基础","slug":"java基础","count":7,"path":"api/categories/java基础.json"}],"tags":[{"name":"java","slug":"java","count":7,"path":"api/tags/java.json"},{"name":"todo","slug":"todo","count":4,"path":"api/tags/todo.json"}],"author":{"name":"Qidai","slug":"blog-author","avatar":"/img/v2-b98d05a15e22949b1a1c70d453fb71ed_720w.jpg","link":"/","description":"吃喝，死宅，折腾","socials":{"github":"https://github.com/ziqiang-wang-chn","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/291152218"},"mail":{"icon":"/svg/mail.svg","link":"mailto:ziqiang_wang_chn@163.com"},"rss":{"icon":"/svg/RSS.svg","link":"https://ohbug.cn/atom.xml"}}}},"feature":true}}