{"title":"Spring6-AOP","uid":"30fb76edd6cb328c4c2c75f78ac58f78","slug":"spring/spring6-4","date":"2023-02-08T02:31:46.000Z","updated":"2023-02-08T07:46:36.424Z","comments":true,"path":"api/articles/spring/spring6-4.json","keywords":null,"cover":"/img/spring/OG-Spring.png","content":"<h1 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h1><ul>\n<li><p>在系统流程中，我们需要在特定的时机插入一些交叉业务，比如日志、事务管理、安全等。这些交叉业务几乎是通用的，将与核心业务无关的代码独立的抽取出来，形成一个独立的组件，然后以横向交叉的方式应用到业务流程当中的过程被称为AOP。AOP就可以将这些交叉业务集中处理，使得程序员更专注于实现业务逻辑。</p>\n</li>\n<li><p>连接点 Joinpoint：方法的执行前后，异常抛出之后等位置。</p>\n</li>\n<li><p>切点 Pointcut：真正织入切面的方法。</p>\n</li>\n<li><p>通知 Advice：具体你要织入的代码。通知包括：</p>\n<ul>\n<li>前置通知</li>\n<li>后置通知</li>\n<li>环绕通知</li>\n<li>异常通知</li>\n<li>最终通知</li>\n</ul>\n</li>\n<li><p>切面 Aspect：切点 + 通知就是切面。</p>\n</li>\n<li><p>织入 Weaving：把通知应用到目标对象上的过程。</p>\n</li>\n<li><p>代理对象 Proxy：一个目标对象被织入通知后产生的新对象。</p>\n</li>\n<li><p>目标对象 Target： 被织入通知的对象。</p>\n</li>\n</ul>\n<h1 id=\"切点表达式\"><a href=\"#切点表达式\" class=\"headerlink\" title=\"切点表达式\"></a>切点表达式</h1><ul>\n<li>就是用来匹配管理的对象中的方法的，被匹配的方法会被应用相应的切面方法。</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">execution([访问控制权限修饰符] 返回值类型 [全限定类名]方法名(形式参数列表) [异常])\nexecution([可选项           ] 必填项    [必填项    ]必填项(必填项     ) [可选项])\n\n&#x2F;&#x2F; 访问控制权限修饰符：public private protected  没写，就是4个权限都包括\n&#x2F;&#x2F; 返回值类型：* 表示所有返回值类型\n&#x2F;&#x2F; 全限定类名：“..” 表示当前包以及子包\n&#x2F;&#x2F; 方法名：*表示所有方法\n&#x2F;&#x2F; 形式参数列表：() 表示没有参数，(..) 参数类型和个数随意，(*) 只有一个参数，(*, String) 第一个参数类型随意，第二个参数是String类型\n&#x2F;&#x2F; 异常：省略时表示任意异常类型</code></pre>\n\n<h1 id=\"AOP注解使用\"><a href=\"#AOP注解使用\" class=\"headerlink\" title=\"AOP注解使用\"></a>AOP注解使用</h1><ul>\n<li><p>使用注解开发，需要依赖 <code>AspectJ</code> 。</p>\n</li>\n<li><p>增加 <code>AspectJ</code> 的pom依赖。</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-aspects&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;6.0.3&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<ul>\n<li>下面来测试一下注解的使用以及生效时机。<ul>\n<li>前置通知：@Before 目标方法执行之前的通知。</li>\n<li>后置通知：@AfterReturning 目标方法执行之后的通知。</li>\n<li>环绕通知：@Around 目标方法之前添加通知，同时目标方法执行之后添加通知。</li>\n<li>异常通知：@AfterThrowing 发生异常之后执行的通知。</li>\n<li>最终通知：@After 放在finally语句块中的通知。</li>\n<li>优先级定义：@Order，更改切面的生效优先级。数字越小，优先级越高。</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Configuration\n@ComponentScan(&#123;&quot;cn.ohbug&quot;&#125;)  &#x2F;&#x2F; 配置扫描路径\n@EnableAspectJAutoProxy   &#x2F;&#x2F; 开启自动切面代理\npublic class ApplicationConfig &#123;\n    public static void main(String[] args) &#123;\n        AnnotationConfigApplicationContext context &#x3D; new AnnotationConfigApplicationContext(ApplicationConfig.class);\n        AccountService bean &#x3D; context.getBean(&quot;accountService&quot;, AccountService.class);\n        bean.createAccount();\n    &#125;\n&#125;\n\n@Service(&quot;accountService&quot;)\npublic class AccountService &#123;\n    public void createAccount() &#123;\n        System.out.println(&quot;创建账户...&quot;);\n    &#125;\n&#125;\n\n@Component\n@Aspect\npublic class AccountAspect &#123;\n    &#x2F;&#x2F; 匹配public void 修饰的AccountService中create开头的无参方法。\n    @Before(&quot;execution(public void cn.ohbug.AccountService.create* ())&quot;)\n    public void before() &#123;\n        System.out.println(&quot;create account 之前 before&quot;);\n    &#125;\n    @AfterReturning(&quot;execution(public void cn.ohbug.AccountService.create* ())&quot;)\n    public void afterReturning() &#123;\n        System.out.println(&quot;create account 之后 AfterReturning&quot;);\n    &#125;\n    @Around(&quot;execution(public void cn.ohbug.AccountService.create* ())&quot;)\n    public void around(ProceedingJoinPoint joinPoint) &#123;\n        System.out.println(&quot;create account 环绕前 Around&quot;);\n        try &#123;\n            joinPoint.proceed();  &#x2F;&#x2F; 相当于方法放行\n        &#125; catch (Throwable e) &#123;\n            throw new RuntimeException(e);\n        &#125;\n        System.out.println(&quot;create account 环绕后 Around&quot;);\n    &#125;\n    @AfterThrowing(&quot;execution(public void cn.ohbug.AccountService.create* ())&quot;)\n    public void afterThrowing() &#123;\n        System.out.println(&quot;create account 异常 AfterThrowing&quot;);\n    &#125;\n\n    @After(&quot;execution(public void cn.ohbug.AccountService.create* ())&quot;)\n    public void after() &#123;\n        System.out.println(&quot;create account 之后 @After&quot;);\n    &#125;\n&#125;\n\n@Component\n@Aspect\n@Order(0)  &#x2F;&#x2F; 优先于一切aspect执行\npublic class SecureAspect &#123;\n    @Before(&quot;execution(public void cn.ohbug.AccountService.create* ())&quot;)\n    public void isSecure() &#123;\n        System.out.println(&quot;安全检查...&quot;);\n    &#125;\n&#125;\n&#x2F;&#x2F; out\n&#x2F;&#x2F;安全检查...\n&#x2F;&#x2F;create account 环绕前 Around\n&#x2F;&#x2F;create account 之前 before\n&#x2F;&#x2F;创建账户...\n&#x2F;&#x2F;create account 之后 AfterReturning\n&#x2F;&#x2F;create account 之后 @After\n&#x2F;&#x2F;create account 环绕后 Around\n</code></pre>\n\n<ul>\n<li>若 <code>createAccount</code> 方法出现异常，则  <code>@Around</code>   <code>@AfterReturning</code> 不会执行。</li>\n</ul>\n","abstracts":"AOP概念及注解使用。","text":"AOP概念及注解使用。","link":"","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[{"name":"Spring6","slug":"Spring6","count":4,"path":"api/categories/Spring6.json"}],"tags":[{"name":"Spring6","slug":"Spring6","count":4,"path":"api/tags/Spring6.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">概念</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%88%87%E7%82%B9%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><span class=\"toc-text\">切点表达式</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#AOP%E6%B3%A8%E8%A7%A3%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">AOP注解使用</span></a></li></ol>","author":{"name":"Qidai","slug":"blog-author","avatar":"/img/v2-b98d05a15e22949b1a1c70d453fb71ed_720w.jpg","link":"/","description":"吃喝，死宅，折腾","socials":{"github":"https://github.com/ziqiang-wang-chn","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/291152218"},"mail":{"icon":"/svg/mail.svg","link":"mailto:ziqiang_wang_chn@163.com"},"rss":{"icon":"/svg/RSS.svg","link":"https://ohbug.cn/atom.xml"}}}},"mapped":true,"prev_post":{"title":"Java复习篇：抽象类，String，枚举","uid":"4a3de2f382252848e66f9fb50dc1dbc0","slug":"java/basic/basicjava3","date":"2023-01-13T08:15:35.000Z","updated":"2023-02-02T10:10:38.637Z","comments":true,"path":"api/articles/java/basic/basicjava3.json","keywords":null,"cover":"/img/java/basicjava.jpg","text":"内容来自于自己的拓展总结，对知识点进行总结，不过多涉及基础语法，例如定义循环等。文中部分的引用的来源见文章开头。","link":"","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"15 mins."},"categories":[{"name":"java基础","slug":"java基础","count":7,"path":"api/categories/java基础.json"}],"tags":[{"name":"java","slug":"java","count":7,"path":"api/tags/java.json"}],"author":{"name":"Qidai","slug":"blog-author","avatar":"/img/v2-b98d05a15e22949b1a1c70d453fb71ed_720w.jpg","link":"/","description":"吃喝，死宅，折腾","socials":{"github":"https://github.com/ziqiang-wang-chn","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/291152218"},"mail":{"icon":"/svg/mail.svg","link":"mailto:ziqiang_wang_chn@163.com"},"rss":{"icon":"/svg/RSS.svg","link":"https://ohbug.cn/atom.xml"}}}},"feature":true},"next_post":{"title":"Docker 基础","uid":"f1090bfedc2e663395ad1f45484947c5","slug":"docker/docker1","date":"2023-02-07T12:41:41.000Z","updated":"2023-02-13T14:16:43.427Z","comments":true,"path":"api/articles/docker/docker1.json","keywords":null,"cover":"/img/docker/docker-cover.png","text":"其中涉及到的概念，基本命令。","link":"","photos":[],"count_time":{"symbolsCount":"9.5k","symbolsTime":"9 mins."},"categories":[{"name":"Docker","slug":"Docker","count":2,"path":"api/categories/Docker.json"}],"tags":[{"name":"Docker","slug":"Docker","count":2,"path":"api/tags/Docker.json"}],"author":{"name":"Qidai","slug":"blog-author","avatar":"/img/v2-b98d05a15e22949b1a1c70d453fb71ed_720w.jpg","link":"/","description":"吃喝，死宅，折腾","socials":{"github":"https://github.com/ziqiang-wang-chn","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/291152218"},"mail":{"icon":"/svg/mail.svg","link":"mailto:ziqiang_wang_chn@163.com"},"rss":{"icon":"/svg/RSS.svg","link":"https://ohbug.cn/atom.xml"}}}}}}