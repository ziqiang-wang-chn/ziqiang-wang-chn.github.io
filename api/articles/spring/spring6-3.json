{"title":"Spring6-IoC注解开发","uid":"9db447d066a0b58da846388fb136c7b5","slug":"spring/spring6-3","date":"2023-02-07T12:41:41.000Z","updated":"2023-02-07T16:28:18.761Z","comments":true,"path":"api/articles/spring/spring6-3.json","keywords":null,"cover":"/img/spring/OG-Spring.png","content":"<h1 id=\"Component\"><a href=\"#Component\" class=\"headerlink\" title=\"@Component\"></a>@Component</h1><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.powernode.annotation;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n@Target(value &#x3D; &#123;ElementType.TYPE&#125;)\n@Retention(value &#x3D; RetentionPolicy.RUNTIME)\npublic @interface Component &#123;\n    String value();\n&#125;</code></pre>\n\n<ul>\n<li>如下可以看到 <code>@Controller</code> <code>@Service</code> <code>@Repository</code> 三个注解都是 <code>@Component</code> 组件的别名，<code>@AliasFor</code> 表示为 <code>@Component</code> 起的别名。</li>\n</ul>\n<details class=\"custom-details\">\n<summary><code>@Controller</code> <code>@Service</code> <code>@Repository</code> 源码</summary>\n<p><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Target(&#123;ElementType.TYPE&#125;)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Component\npublic @interface Controller &#123;\n    @AliasFor(\n        annotation &#x3D; Component.class\n    )\n    String value() default &quot;&quot;;\n&#125;\n\n@Target(&#123;ElementType.TYPE&#125;)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Component\npublic @interface Service &#123;\n    @AliasFor(\n        annotation &#x3D; Component.class\n    )\n    String value() default &quot;&quot;;\n&#125;\n\n@Target(&#123;ElementType.TYPE&#125;)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Component\npublic @interface Repository &#123;\n    @AliasFor(\n        annotation &#x3D; Component.class\n    )\n    String value() default &quot;&quot;;\n&#125;\n</code></pre>\n\n</p>\n</details>\n<h1 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h1><ul>\n<li>综合使用IoC的注解，进行全注解开发。实现功能是从Controller层到数据层的数据保存，其中包括数据源的验证问题。项目结构如下</li>\n</ul>\n<p><img src=\"/img/spring/spring6/IoCannotation.png\" alt=\"picture 1\">  </p>\n<details class=\"custom-details\">\n<summary>pom.xml</summary>\n<p><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-context&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;6.0.3&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.junit.jupiter&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;junit-jupiter&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;5.6.3&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;\n&lt;!--  Spring 6中使用@Resource 需要的依赖--&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;jakarta.annotation&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;jakarta.annotation-api&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;2.1.1&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n</p>\n</details>\n<h2 id=\"包：cn-ohbug-bean\"><a href=\"#包：cn-ohbug-bean\" class=\"headerlink\" title=\"包：cn.ohbug.bean\"></a>包：cn.ohbug.bean</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport org.springframework.stereotype.Component;\n&#x2F;&#x2F; 指定User的Bean id&#x3D;&quot;userBean&quot;\n@Component(value &#x3D; &quot;userBean&quot;)   \n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class User &#123;\n    private String name;\n    private int age;\n&#125;\n\nimport lombok.Getter;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n&#x2F;&#x2F; value是可省略的\n&#x2F;&#x2F; 如果把value属性彻底去掉，spring会被Bean自动取名，并且默认名字的规律是：Bean类名首字母小写即可。\n@Component(&quot;dataSource&quot;)  \n@Getter\npublic class DataSource &#123;\n    &#x2F;&#x2F; @Value只可以注入简单类型 可以不通过set方法设值\n    @Value(&quot;root&quot;)\n    private String name;\n    @Value(&quot;123456&quot;)\n    private String passwd;\n&#125;</code></pre>\n\n<h2 id=\"包：cn-ohbug-controller\"><a href=\"#包：cn-ohbug-controller\" class=\"headerlink\" title=\"包：cn.ohbug.controller\"></a>包：cn.ohbug.controller</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\nimport cn.ohbug.bean.User;\nimport cn.ohbug.service.UserService;\nimport jakarta.annotation.Resource;\nimport org.springframework.stereotype.Controller;\n@Controller(&quot;userController&quot;)\npublic class UserController &#123;\n    @Resource(name &#x3D; &quot;userService&quot;)\n    private UserService userService;\n    public void saveUser(User user) &#123;\n        userService.saveUser(user);\n    &#125;\n&#125;</code></pre>\n\n<h2 id=\"包：cn-ohbug-service\"><a href=\"#包：cn-ohbug-service\" class=\"headerlink\" title=\"包：cn.ohbug.service\"></a>包：cn.ohbug.service</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import cn.ohbug.bean.DataSource;\nimport cn.ohbug.bean.User;\nimport cn.ohbug.dao.UserDao;\nimport jakarta.annotation.Resource;\nimport org.springframework.stereotype.Service;\n&#x2F;&#x2F; bean id&#x3D;&quot;userService&quot;\n@Service(&quot;userService&quot;)\npublic class UserService &#123;\n    &#x2F;&#x2F; 注入id为userDaoForOracle的Bean\n    @Resource(name &#x3D; &quot;userDaoForOracle&quot;)\n    private UserDao userDao;\n    &#x2F;&#x2F; 注入配置信息\n    @Resource(name &#x3D; &quot;dataSource&quot;)\n    private DataSource dataSource;\n    public void saveUser(User user) &#123;\n        userDao.saveUser(user, dataSource);\n    &#125;\n&#125;\n\n&#x2F;&#x2F; </code></pre>\n\n<ul>\n<li><code>@Resource</code> 注解默认根据名称装配byName，未指定name时，使用变量名作为name。通过name找不到的话会自动启动通过类型byType装配。用在属性上、setter方法上。</li>\n<li><code>@Resource</code> 注解使用时没有指定<code>name</code>的时候，还是根据<code>name</code>进行查找，这个<code>name</code>是被修饰的变量名。当通过<code>name</code>找不到的时候，自然会启动<code>byType</code>进行注入。</li>\n<li><code>@Autowired</code> 注解默认根据类型注入。如果要根据名称注入的话，需要配合@Qualifier注解指定注入id一起使用，用在属性上、setter方法上、构造方法上、构造方法参数上。**<code>@Autowired</code> 已经不被推荐使用了**</li>\n<li>Spring5 的话 需要引入不同依赖</li>\n</ul>\n<details class=\"custom-details\">\n<summary>pom.xml</summary>\n<p><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!-- Spring5 --&gt;\n&lt;dependency&gt;\n  &lt;groupId&gt;javax.annotation&lt;&#x2F;groupId&gt;\n  &lt;artifactId&gt;javax.annotation-api&lt;&#x2F;artifactId&gt;\n  &lt;version&gt;1.3.2&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;\n&lt;!-- Spring6 --&gt;\n&lt;dependency&gt;\n  &lt;groupId&gt;jakarta.annotation&lt;&#x2F;groupId&gt;\n  &lt;artifactId&gt;jakarta.annotation-api&lt;&#x2F;artifactId&gt;\n  &lt;version&gt;2.1.1&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n</p>\n</details>\n<h2 id=\"包：cn-ohbug-dao\"><a href=\"#包：cn-ohbug-dao\" class=\"headerlink\" title=\"包：cn.ohbug.dao\"></a>包：cn.ohbug.dao</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import cn.ohbug.bean.DataSource;\nimport cn.ohbug.bean.User;\n&#x2F;&#x2F; 并没有任何注解，只是用来规范实现类的\npublic interface UserDao &#123;\n    default boolean authLogin(DataSource dataSource) &#123;\n        return &quot;root&quot;.equals(dataSource.getName()) &amp;&amp; &quot;123456&quot;.equals(dataSource.getPasswd());\n    &#125;\n    void saveUser(User user, DataSource dataSource);\n&#125;\n</code></pre>\n<h2 id=\"包：cn-ohbug-dao-impl\"><a href=\"#包：cn-ohbug-dao-impl\" class=\"headerlink\" title=\"包：cn.ohbug.dao.impl\"></a>包：cn.ohbug.dao.impl</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\nimport cn.ohbug.bean.DataSource;\nimport cn.ohbug.bean.User;\nimport cn.ohbug.dao.UserDao;\nimport org.springframework.stereotype.Repository;\n&#x2F;&#x2F; bean id&#x3D;&quot;userDaoForMySQL&quot;\n@Repository(&quot;userDaoForMySQL&quot;)\npublic class UserDaoForMySQL implements UserDao &#123;\n    @Override\n    public void saveUser(User user, DataSource dataSource) &#123;\n        if (!authLogin(dataSource)) &#123;\n            System.out.println(&quot;MySQL auth error&quot;);\n            return;\n        &#125;\n        System.out.println(&quot;MySQL save -&gt; : &quot; + user);\n    &#125;\n&#125;\n\nimport cn.ohbug.bean.DataSource;\nimport cn.ohbug.bean.User;\nimport cn.ohbug.dao.UserDao;\nimport org.springframework.stereotype.Repository;\n&#x2F;&#x2F; bean id&#x3D;&quot;userDaoForOracle&quot;\n@Repository(&quot;userDaoForOracle&quot;) \npublic class UserDaoForOracle implements UserDao &#123;\n    @Override\n    public void saveUser(User user, DataSource dataSource) &#123;\n        if (!authLogin(dataSource)) &#123;\n            System.out.println(&quot;Oracle auth error&quot;);\n            return;\n        &#125;\n        System.out.println(&quot;Oracle save -&gt; : &quot; + user);\n    &#125;\n&#125;</code></pre>\n<h2 id=\"包：cn-ohbug-config\"><a href=\"#包：cn-ohbug-config\" class=\"headerlink\" title=\"包：cn.ohbug.config\"></a>包：cn.ohbug.config</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\n&#x2F;&#x2F; 扫描bean的路径\n&#x2F;&#x2F; 相当于在配置文件中  \n&#x2F;&#x2F; &lt;context:component-scan base-package&#x3D;&quot;cn.ohbug.bean,cn.ohbug.controller,cn.ohbug.service,cn.ohbug.dao&quot;&#x2F;&gt;\n@ComponentScan(&#123;&quot;cn.ohbug.controller&quot;, &quot;cn.ohbug.dao&quot;, &quot;cn.ohbug.service&quot;, &quot;cn.ohbug.bean&quot;&#125;)\n&#x2F;&#x2F; 标注为配置类，相当于之前的xml配置文件\n@Configuration\npublic class ApplicationConfig &#123;\n&#125;</code></pre>\n\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">    public static void main(String[] args) &#123;\n        AnnotationConfigApplicationContext context &#x3D; new AnnotationConfigApplicationContext(ApplicationConfig.class);\n        UserController controller &#x3D; context.getBean(&quot;userController&quot;, UserController.class);\n        controller.saveUser(new User(&quot;Qidai&quot;, 24));\n    &#125;\n&#x2F;&#x2F; out \n&#x2F;&#x2F; Oracle save -&gt; : User(name&#x3D;Qidai, age&#x3D;24)</code></pre>","abstracts":"IoC中的注解使用。","text":"IoC中的注解使用。","link":"","photos":[],"count_time":{"symbolsCount":"7.4k","symbolsTime":"7 mins."},"categories":[{"name":"Spring6","slug":"Spring6","count":4,"path":"api/categories/Spring6.json"}],"tags":[{"name":"Spring6","slug":"Spring6","count":4,"path":"api/tags/Spring6.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Component\"><span class=\"toc-text\">@Component</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BE%8B%E5%AD%90\"><span class=\"toc-text\">例子</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8C%85%EF%BC%9Acn-ohbug-bean\"><span class=\"toc-text\">包：cn.ohbug.bean</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8C%85%EF%BC%9Acn-ohbug-controller\"><span class=\"toc-text\">包：cn.ohbug.controller</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8C%85%EF%BC%9Acn-ohbug-service\"><span class=\"toc-text\">包：cn.ohbug.service</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8C%85%EF%BC%9Acn-ohbug-dao\"><span class=\"toc-text\">包：cn.ohbug.dao</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8C%85%EF%BC%9Acn-ohbug-dao-impl\"><span class=\"toc-text\">包：cn.ohbug.dao.impl</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8C%85%EF%BC%9Acn-ohbug-config\"><span class=\"toc-text\">包：cn.ohbug.config</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">测试</span></a></li></ol></li></ol>","author":{"name":"Qidai","slug":"blog-author","avatar":"/img/v2-b98d05a15e22949b1a1c70d453fb71ed_720w.jpg","link":"/","description":"吃喝，死宅，折腾","socials":{"github":"https://github.com/ziqiang-wang-chn","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/291152218"},"mail":{"icon":"/svg/mail.svg","link":"mailto:ziqiang_wang_chn@163.com"},"rss":{"icon":"/svg/RSS.svg","link":"https://ohbug.cn/atom.xml"}}}},"mapped":true,"prev_post":{"title":"Docker 基本使用","uid":"a669337939248cdbc56424f6a13bbd9c","slug":"docker/docker1","date":"2023-02-07T12:41:41.000Z","updated":"2023-02-08T08:23:48.778Z","comments":true,"path":"api/articles/docker/docker1.json","keywords":null,"cover":"/img/docker/docker-cover.png","text":"基本命令及使用。","link":"","photos":[],"count_time":{"symbolsCount":786,"symbolsTime":"1 mins."},"categories":[{"name":"Docker","slug":"Docker","count":1,"path":"api/categories/Docker.json"}],"tags":[{"name":"Docker","slug":"Docker","count":1,"path":"api/tags/Docker.json"}],"author":{"name":"Qidai","slug":"blog-author","avatar":"/img/v2-b98d05a15e22949b1a1c70d453fb71ed_720w.jpg","link":"/","description":"吃喝，死宅，折腾","socials":{"github":"https://github.com/ziqiang-wang-chn","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/291152218"},"mail":{"icon":"/svg/mail.svg","link":"mailto:ziqiang_wang_chn@163.com"},"rss":{"icon":"/svg/RSS.svg","link":"https://ohbug.cn/atom.xml"}}}}},"next_post":{"title":"Spring6 - Bean","uid":"7de900b2cf533ef3e8fa2a5e99f915a4","slug":"spring/spring6-2","date":"2023-02-06T05:29:19.000Z","updated":"2023-02-07T12:43:53.125Z","comments":true,"path":"api/articles/spring/spring6-2.json","keywords":null,"cover":"/img/spring/OG-Spring.png","text":"Bean来源，获取，生命周期。","link":"","photos":[],"count_time":{"symbolsCount":"9k","symbolsTime":"8 mins."},"categories":[{"name":"Spring6","slug":"Spring6","count":4,"path":"api/categories/Spring6.json"}],"tags":[{"name":"Spring6","slug":"Spring6","count":4,"path":"api/tags/Spring6.json"}],"author":{"name":"Qidai","slug":"blog-author","avatar":"/img/v2-b98d05a15e22949b1a1c70d453fb71ed_720w.jpg","link":"/","description":"吃喝，死宅，折腾","socials":{"github":"https://github.com/ziqiang-wang-chn","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/291152218"},"mail":{"icon":"/svg/mail.svg","link":"mailto:ziqiang_wang_chn@163.com"},"rss":{"icon":"/svg/RSS.svg","link":"https://ohbug.cn/atom.xml"}}}}}}