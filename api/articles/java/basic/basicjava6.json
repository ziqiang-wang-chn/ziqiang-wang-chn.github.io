{"title":"Java基础复习篇 {六}","uid":"6d4cc364863192d1e6fc5661442a5889","slug":"java/basic/basicjava6","date":"2023-01-29T01:56:01.000Z","updated":"2023-02-01T15:27:03.401Z","comments":true,"path":"api/articles/java/basic/basicjava6.json","keywords":null,"cover":"/img/java/basicjava.jpg","content":"<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">注意</p>\n<p>  本文内容来自书籍 ： 《写给大忙人看的JAVA核心技术》，《Java编程的逻辑》</p>\n<p>  文中实现的代码，均来自于自己参考书中案例并基于Oracle openJDK 17.0.5 版本进行编写实现。<br>  文章欢迎大家评论指正。</p>\n</div>\n<p><img src=\"/img/java/CollectionClassMap-Map.png\"></p>\n<ul>\n<li>紫色实线为继承，绿色实线为接口的继承，绿色虚线为类的继承。</li>\n<li>下面进行实现类的源码分析，主要是分析其实现类的主要功能。</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://www.pdai.tech/md/java/collection/java-map-HashMap&HashSet.html\">https://www.pdai.tech/md/java/collection/java-map-HashMap&amp;HashSet.html</a><br><a href=\"https://www.bilibili.com/video/BV1ST411o7GR/?p=6&spm_id_from=pageDriver&vd_source=e1294f8209fc39ec6e458c23cce6613f\">https://www.bilibili.com/video/BV1ST411o7GR/?p=6&amp;spm_id_from=pageDriver&amp;vd_source=e1294f8209fc39ec6e458c23cce6613f</a></p></blockquote>\n<h1 id=\"HashMap\"><a href=\"#HashMap\" class=\"headerlink\" title=\"HashMap\"></a>HashMap</h1><h2 id=\"移位运算\"><a href=\"#移位运算\" class=\"headerlink\" title=\"移位运算\"></a>移位运算</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">A&gt;&gt;1;   &#x2F;&#x2F; 相当于A&#x2F;2，高位正数补零，负数补一\nA&lt;&lt;1;   &#x2F;&#x2F;相当于A*2，高位移出，低位的空位补零\nA&gt;&gt;&gt;1； &#x2F;&#x2F;无符号右移，只使用 0 进行补位</code></pre>\n<h2 id=\"散列表\"><a href=\"#散列表\" class=\"headerlink\" title=\"散列表\"></a>散列表</h2><ul>\n<li>即一个元素通过一个function可以得出对应的的散列值，但不同的元素也可能得到相同的散列值。是能够通过给定的关键字的值直接访问到具体对应的值的一个数据结构。</li>\n<li>把关键字称为 Key，记录称为 Value，通过 Key 访问一个function来得到 Value 的地址。而这个function，也叫作散列函数或者哈希函数，存放记录的数组叫作散列表。</li>\n<li>当发生两个key产生了同一个散列值时，此时发生hash碰撞，解决办法就是拉链法，即如图通过链表的方式将发生冲突的元素都连接起来。HashMap就是采用这一方法解决hash冲突，但是如果当冲突非常多，那么链表会越来越长，则效率变差，此时HashMap中定义了一个值，当链表长度超过此值且满足一定条件时，将链表转化为红黑树。</li>\n</ul>\n<p><img src=\"/img/java/hashmapfuncation.png\"></p>\n<h2 id=\"HashMap结构\"><a href=\"#HashMap结构\" class=\"headerlink\" title=\"HashMap结构\"></a>HashMap结构</h2><p><img src=\"/img/java/java-collection-hashmap8.png\"></p>\n<ul>\n<li><p>Map的实现基于数组+链表+红黑树结构。每一个数组被称为一个bin，每一个bin里面可能连接着链表或者红黑树结构。</p>\n</li>\n<li><p>数组的源码定义，从此看出Map的实现基于Node类型的数组。</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">transient Node&lt;K,V&gt;[] table;</code></pre>\n\n\n<ul>\n<li>链表的源码定义</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">static class Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123;\n    final int hash;\n    final K key;\n    V value;\n    Node&lt;K,V&gt; next;\n    public final int hashCode() &#123;\n        &#x2F;&#x2F; 异或操作，相同为一，不同为0，则此方法表示若key和value相同则此Node的hashcode为0\n        return Objects.hashCode(key) ^ Objects.hashCode(value);\n    &#125;\n    public final boolean equals(Object o) &#123;\n        &#x2F;&#x2F; 地址一样直接相同\n        if (o &#x3D;&#x3D; this)\n            return true;\n        &#x2F;&#x2F; 否则只对比key和value，相同则Node相同\n        return o instanceof Map.Entry&lt;?, ?&gt; e\n                &amp;&amp; Objects.equals(key, e.getKey())\n                &amp;&amp; Objects.equals(value, e.getValue());\n    &#125;\n&#125;\npublic static int hashCode(Object o) &#123;\n    return o !&#x3D; null ? o.hashCode() : 0;\n&#125;\npublic static boolean equals(Object a, Object b) &#123;\n    return (a &#x3D;&#x3D; b) || (a !&#x3D; null &amp;&amp; a.equals(b));\n&#125;</code></pre>\n\n<ul>\n<li><p>从这也可以反应出hashcode和equals方法的异同：hashcode是用来计算一个元素的存储位置的，equals是判断存储位置中是否存在相同的元素，如果两个对象的equals是true，那么他们的hashcode一定相同，而如果两对象的hashcode相同，但equals的结果是不一定是true的。这也说明了为啥重写equals就必须重写hashcode。</p>\n</li>\n<li><p>红黑树的源码定义为</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">static final class TreeNode&lt;K,V&gt; extends LinkedHashMap.Entry&lt;K,V&gt; &#123;\n    TreeNode&lt;K,V&gt; parent;  &#x2F;&#x2F; red-black tree links\n    TreeNode&lt;K,V&gt; left;\n    TreeNode&lt;K,V&gt; right;\n    TreeNode&lt;K,V&gt; prev;    &#x2F;&#x2F; needed to unlink next upon deletion+\n    boolean red;\n    ...\n&#125;</code></pre>\n\n<h2 id=\"内部变量\"><a href=\"#内部变量\" class=\"headerlink\" title=\"内部变量\"></a>内部变量</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n</code></pre>\n\n\n","feature":true,"abstracts":"内容来自于《Java编程的逻辑》，《写给大忙人看的Java核心技术》以及自己的拓展总结，以书为纲，对知识点进行全面拓展，不过多涉及基础语法，例如定义循环等。文中部分的引用的来源见文章开头。","text":"内容来自于《Java编程的逻辑》，《写给大忙人看的Java核心技术》以及自己的拓展总结，以书为纲，对知识点进行全面拓展，不过多涉及基础语法，例如定义循环等。文中部分的引用的来源见文章开头。","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"java基础","slug":"java基础","count":6,"path":"api/categories/java基础.json"}],"tags":[{"name":"java","slug":"java","count":6,"path":"api/tags/java.json"},{"name":"《Java编程的逻辑》","slug":"《Java编程的逻辑》","count":6,"path":"api/tags/《Java编程的逻辑》.json"},{"name":"《写给大忙人看的Java核心技术》","slug":"《写给大忙人看的Java核心技术》","count":6,"path":"api/tags/《写给大忙人看的Java核心技术》.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#HashMap\"><span class=\"toc-text\">HashMap</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%A7%BB%E4%BD%8D%E8%BF%90%E7%AE%97\"><span class=\"toc-text\">移位运算</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%A3%E5%88%97%E8%A1%A8\"><span class=\"toc-text\">散列表</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#HashMap%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">HashMap结构</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%86%85%E9%83%A8%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">内部变量</span></a></li></ol></li></ol>","author":{"name":"Qidai","slug":"blog-author","avatar":"/img/v2-b98d05a15e22949b1a1c70d453fb71ed_720w.jpg","link":"/","description":"吃喝，死宅，折腾","socials":{"github":"https://github.com/ziqiang-wang-chn","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/291152218"},"mail":{"icon":"/svg/mail.svg","link":"mailto:ziqiang_wang_chn@163.com"},"rss":{"icon":"/svg/RSS.svg","link":"https://ohbug.cn/atom.xml"}}}},"mapped":true,"prev_post":{},"next_post":{"title":"Java基础复习篇 {五}","uid":"6f5a71f343f492b5f1caeee940e1a694","slug":"java/basic/basicjava5","date":"2023-01-27T01:57:16.000Z","updated":"2023-01-30T11:11:15.373Z","comments":true,"path":"api/articles/java/basic/basicjava5.json","keywords":null,"cover":"/img/java/basicjava.jpg","text":"内容来自于《Java编程的逻辑》，《写给大忙人看的Java核心技术》以及自己的拓展总结，以书为纲，对知识点进行全面拓展，不过多涉及基础语法，例如定义循环等。文中部分的引用的来源见文章开头。","link":"","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"14 mins."},"categories":[{"name":"java基础","slug":"java基础","count":6,"path":"api/categories/java基础.json"}],"tags":[{"name":"java","slug":"java","count":6,"path":"api/tags/java.json"},{"name":"《Java编程的逻辑》","slug":"《Java编程的逻辑》","count":6,"path":"api/tags/《Java编程的逻辑》.json"},{"name":"《写给大忙人看的Java核心技术》","slug":"《写给大忙人看的Java核心技术》","count":6,"path":"api/tags/《写给大忙人看的Java核心技术》.json"}],"author":{"name":"Qidai","slug":"blog-author","avatar":"/img/v2-b98d05a15e22949b1a1c70d453fb71ed_720w.jpg","link":"/","description":"吃喝，死宅，折腾","socials":{"github":"https://github.com/ziqiang-wang-chn","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/291152218"},"mail":{"icon":"/svg/mail.svg","link":"mailto:ziqiang_wang_chn@163.com"},"rss":{"icon":"/svg/RSS.svg","link":"https://ohbug.cn/atom.xml"}}}},"feature":true}}