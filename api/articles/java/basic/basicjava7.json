{"title":"Java复习篇：字符与字节流","uid":"9c7ce237510431a1698beb3d7aef4793","slug":"java/basic/basicjava7","date":"2023-02-04T01:20:15.000Z","updated":"2023-02-18T10:38:20.288Z","comments":true,"path":"api/articles/java/basic/basicjava7.json","keywords":null,"cover":"/img/java/basicjava.jpg","content":"<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">注意</p>\n<p>  文中实现的代码，均来自于自己参考书中案例并基于Oracle openJDK 17.0.5 版本进行编写实现。<br>  文章欢迎大家评论指正。</p>\n</div>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://juejin.cn/post/6844903993844432909\">https://juejin.cn/post/6844903993844432909</a></p></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>基本常识是: 一般读写文件需要两次数据复制，比如读文件，需要先从硬盘复制到操作系统内核，再从内核复制到应用程序分配的内存中。操作系统运行所在的环境和应用程序是不一样的，操作系统所在的环境是内核态，应用程序是用户态，应用程序调用操作系统的功能，需要两次环境的切换，先从用户态切到内核态，再从内核态切到用户态。这种用户态&#x2F;内核态的切换是有开销的，应尽量减少这种切换。为提升效率可以使用缓冲区。</p></blockquote>\n<center>\n\n<p><img src=\"/img/java/basicjava7-io.png\" alt=\"picture 1\">  </p>\n</center>\n\n\n<h1 id=\"流分类\"><a href=\"#流分类\" class=\"headerlink\" title=\"流分类\"></a>流分类</h1><ul>\n<li>基本分与三类，首先适用于读写二进制形式的流为 inputStream&#x2F;outputStream 类，适用于读写文字内容的 reader&#x2F;writer 类。还有网络IO的 Socket 类。</li>\n</ul>\n<h1 id=\"二进制文件和字节流\"><a href=\"#二进制文件和字节流\" class=\"headerlink\" title=\"二进制文件和字节流\"></a>二进制文件和字节流</h1><h2 id=\"InputStream\"><a href=\"#InputStream\" class=\"headerlink\" title=\"InputStream\"></a>InputStream</h2><ul>\n<li>这是二进制文件字节流的基类，是抽象类</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F; 读方法，返回0到255，如果因为读到末尾后导致的无信息可读返回 -1 . 否则就一直阻塞到有信息可读为止\npublic abstract int read() throws IOException;\n&#x2F;&#x2F; 返回流中不阻塞的字节的估计大小\npublic int available() throws IOException &#123;...&#125;\n&#x2F;&#x2F; 跳读，\npublic long skip(long n) throws IOException &#123;...&#125;\n&#x2F;&#x2F; 回头读，但不是每个实现类都可以实现回头重读，需要先通过markSupported方法测试后才可以知道\n&#x2F;&#x2F; mark 先标记一处，往下读后调用reset即可回到mark位置。readlimit表示从mark处最多往后读多少字节，\n&#x2F;&#x2F; 若往后超了，则mark位置失效。\npublic synchronized void mark(int readlimit) &#123;&#125;\npublic synchronized void reset() throws IOException &#123;...&#125;\npublic boolean markSupported() &#123;...&#125;\npublic void close() throws IOException &#123;&#125;\n&#x2F;&#x2F; java 9中加入的默认实现，里面用到了一个Buffer数组，默认DEFAULT_BUFFER_SIZE是8192字节。\npublic long transferTo(OutputStream out) throws IOException &#123;...&#125;\n...</code></pre>\n<h2 id=\"OutputStream\"><a href=\"#OutputStream\" class=\"headerlink\" title=\"OutputStream\"></a>OutputStream</h2><ul>\n<li>close 之前一般先调用flush，但每个子类的flush有些不同，需要分别对待。</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public abstract void write(int b) throws IOException;\npublic void flush() throws IOException &#123; &#x2F;* NULL *&#x2F; &#125;\npublic void close() throws IOException &#123; &#x2F;* NULL *&#x2F; &#125;\n...</code></pre>\n\n\n<h2 id=\"FileIn-x2F-FileOut\"><a href=\"#FileIn-x2F-FileOut\" class=\"headerlink\" title=\"FileIn&#x2F;FileOut\"></a>FileIn&#x2F;FileOut</h2><ul>\n<li><p>输入源和输出目标是文件的流。</p>\n</li>\n<li><p>FileOutputStream 没有缓冲，没有重写flush方法，调用fush方法没有任何效果，即调用的 OutputStream 的空方法 ，数据只是传递给了操作系统，但操作系统什么时候保存到硬盘上，这是不一定的。要确保数据保存到了硬盘上，可以调用FileOutputStream中的特有方法 sync</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n&#x2F;&#x2F; 同步仅影响此文件描述符下游的缓冲区。\n&#x2F;&#x2F; 若想sync有效，则必须首先调用flush刷新，将缓存刷新到系统后，再sync，系统才会同步到磁盘。然后数据才会受到同步的影响。\nnew FileOutputStream(&quot;out.txt&quot;).getFD().sync();</code></pre>\n\n<ul>\n<li>flush方法只能将应用程序缓冲的数据写到操作系统，sync方法则确保数据写到硬盘，不过一般情况下，我们并不需要手工调用它，只要操作系统和硬件设备没问题，数据迟早会写入。</li>\n</ul>\n<h3 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">FileInputStream inputStream &#x3D; new FileInputStream(&quot;sourceFile&quot;);\nFileOutputStream targetFile &#x3D; new FileOutputStream(&quot;targetFile&quot;);\nint length;\nbyte[] buffer &#x3D; new byte[4];\nwhile ((length&#x3D; inputStream.read(buffer))!&#x3D;-1)&#123;\n    targetFile.write(buffer, 0 , length);\n&#125;\ninputStream.close();\ntargetFile.close();</code></pre>\n\n\n<h2 id=\"其他基本类似，略\"><a href=\"#其他基本类似，略\" class=\"headerlink\" title=\"其他基本类似，略\"></a>其他基本类似，略</h2><ul>\n<li>ByteArrayInputStream&#x2F;ByteArrayOutputStream: 输入源和输出目标是字节数组的流</li>\n<li>DataInputStream&#x2F;DataOutputStream: 装饰类，按基本类型和字符串而非只是字节读写流。</li>\n<li>BufferedInputStream&#x2F;BufferedOutputStream: 装饰类，对输入输出流提供缓冲功能。</li>\n</ul>\n<h1 id=\"文本字符流\"><a href=\"#文本字符流\" class=\"headerlink\" title=\"文本字符流\"></a>文本字符流</h1><h2 id=\"编码\"><a href=\"#编码\" class=\"headerlink\" title=\"编码\"></a>编码</h2><ul>\n<li>utf-8：英文和数字字符每个占一个字节，而每个中文占三个字节。</li>\n<li>gb18030：英文和数字字符每个占一个字节，而每个中文占2个字节。</li>\n<li>utf-16be：无论是英文还是中文字符，每个字符都占两人字节。UTF-16BE也是<strong>Java内存中对字符的编码方式</strong>。</li>\n</ul>\n<h2 id=\"基本类\"><a href=\"#基本类\" class=\"headerlink\" title=\"基本类\"></a>基本类</h2><ul>\n<li>Reader&#x2F;Writer: 字符流的基类，它们是抽象类。</li>\n<li>FileReader&#x2F;FileWriter: 输入源和输出目标是文件的字符流。</li>\n<li>CharArrayReader&#x2F;CharArrayWriter: 输入源和输出目标是char数组的字符流。</li>\n<li>StringReader&#x2F;StringWriter: 输入源和输出目标是String的字符流。</li>\n<li>BufferedReader&#x2F;BufferedWriter: 装饰类，对输入&#x2F;输出流提供缓冲，以及按行读写功能。</li>\n<li>PrintWriter: 装饰类，可将基本类型和对象转换为其字符串形式输出的类。</li>\n<li>InputStreamReader&#x2F;OutputStreamWriter: 适配器类，将字节流转换为字符流。</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">try(\n        FileReader in &#x3D; new FileReader(&quot;sourceFile&quot;, Charset.forName(&quot;utf-8&quot;));\n        BufferedReader reader &#x3D; new BufferedReader(in);\n        PrintStream writer &#x3D; new PrintStream(&quot;target&quot;, Charset.forName(&quot;utf-8&quot;));\n    )\n&#123;\n    while (reader.ready()) &#123;\n        writer.println(reader.readLine());\n    &#125;\n&#125;catch (IOException e) &#123;\n    e.printStackTrace();\n&#125;</code></pre>\n\n<ul>\n<li><p>FileReader&#x2F;FileWriter是没有缓冲的，也不能按行读写，所以，一般应该在它们的外面包上对应的缓冲类。</p>\n</li>\n<li><p><strong>总结：</strong>写文件时，可以优先考虑PrintWriter，因为它使用方便，支持自动缓冲、指定编码类型、类型转换等。</p>\n</li>\n<li><p>如果指定编码类型，需要使用InputStreamReader; 如果不需要，可使用FileReader，但都应该考虑在外面包上缓冲类BufferedReader。</p>\n</li>\n</ul>\n<h1 id=\"字符与字节的区别\"><a href=\"#字符与字节的区别\" class=\"headerlink\" title=\"字符与字节的区别\"></a>字符与字节的区别</h1><ul>\n<li>字节流是按字节读取的，而字符流则是按char读取的，一个char在文件中保存的是几个字节与编码有关，但字符流封装了这种细节，我们操作的对象就是char。</li>\n<li>一个char不完全等同于一个字符，对于绝大部分字符，一个字符就是一个char，根据utf-16be编码不同，对于增补字符集中的字符，需要两个char表示，对于这种字符，Java中的字符流是按char而不是一个完整字符处理的。</li>\n</ul>\n","abstracts":"内容来自于自己的拓展总结，对知识点进行总结，不过多涉及基础语法，例如定义循环等。文中部分的引用的来源见文章开头。","text":"内容来自于自己的拓展总结，对知识点进行总结，不过多涉及基础语法，例如定义循环等。文中部分的引用的来源见文章开头。","link":"","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[{"name":"java基础","slug":"java基础","count":9,"path":"api/categories/java基础.json"}],"tags":[{"name":"java","slug":"java","count":9,"path":"api/tags/java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%B5%81%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">流分类</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6%E5%92%8C%E5%AD%97%E8%8A%82%E6%B5%81\"><span class=\"toc-text\">二进制文件和字节流</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#InputStream\"><span class=\"toc-text\">InputStream</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#OutputStream\"><span class=\"toc-text\">OutputStream</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#FileIn-x2F-FileOut\"><span class=\"toc-text\">FileIn&#x2F;FileOut</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">基本使用</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%BB%96%E5%9F%BA%E6%9C%AC%E7%B1%BB%E4%BC%BC%EF%BC%8C%E7%95%A5\"><span class=\"toc-text\">其他基本类似，略</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%96%87%E6%9C%AC%E5%AD%97%E7%AC%A6%E6%B5%81\"><span class=\"toc-text\">文本字符流</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BC%96%E7%A0%81\"><span class=\"toc-text\">编码</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E7%B1%BB\"><span class=\"toc-text\">基本类</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%8E%E5%AD%97%E8%8A%82%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">字符与字节的区别</span></a></li></ol>","author":{"name":"Qidai","slug":"blog-author","avatar":"/img/v2-b98d05a15e22949b1a1c70d453fb71ed_720w.jpg","link":"/","description":"吃喝，死宅，折腾","socials":{"github":"https://github.com/ziqiang-wang-chn","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/291152218"},"mail":{"icon":"/svg/mail.svg","link":"mailto:ziqiang_wang_chn@163.com"},"rss":{"icon":"/svg/RSS.svg","link":"https://ohbug.cn/atom.xml"}}}},"mapped":true,"prev_post":{"title":"Spring6 - Bean","uid":"7de900b2cf533ef3e8fa2a5e99f915a4","slug":"spring/spring6-2","date":"2023-02-06T05:29:19.000Z","updated":"2023-02-07T12:43:53.125Z","comments":true,"path":"api/articles/spring/spring6-2.json","keywords":null,"cover":"/img/spring/OG-Spring.png","text":"Bean来源，获取，生命周期。","link":"","photos":[],"count_time":{"symbolsCount":"9k","symbolsTime":"8 mins."},"categories":[{"name":"Spring6","slug":"Spring6","count":4,"path":"api/categories/Spring6.json"}],"tags":[{"name":"Spring6","slug":"Spring6","count":4,"path":"api/tags/Spring6.json"}],"author":{"name":"Qidai","slug":"blog-author","avatar":"/img/v2-b98d05a15e22949b1a1c70d453fb71ed_720w.jpg","link":"/","description":"吃喝，死宅，折腾","socials":{"github":"https://github.com/ziqiang-wang-chn","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/291152218"},"mail":{"icon":"/svg/mail.svg","link":"mailto:ziqiang_wang_chn@163.com"},"rss":{"icon":"/svg/RSS.svg","link":"https://ohbug.cn/atom.xml"}}}}},"next_post":{"title":"Java复习篇：I/O 原理与模型","uid":"35c6854a999345df38f931b9ba2ffcae","slug":"java/basic/basicjava8","date":"2023-02-04T01:20:15.000Z","updated":"2023-02-18T10:38:17.428Z","comments":true,"path":"api/articles/java/basic/basicjava8.json","keywords":null,"cover":"/img/java/basicjava.jpg","text":"内容来自于自己的拓展总结，对知识点进行总结，不过多涉及基础语法，例如定义循环等。文中部分的引用的来源见文章开头。","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"java基础","slug":"java基础","count":9,"path":"api/categories/java基础.json"}],"tags":[{"name":"java","slug":"java","count":9,"path":"api/tags/java.json"}],"author":{"name":"Qidai","slug":"blog-author","avatar":"/img/v2-b98d05a15e22949b1a1c70d453fb71ed_720w.jpg","link":"/","description":"吃喝，死宅，折腾","socials":{"github":"https://github.com/ziqiang-wang-chn","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/291152218"},"mail":{"icon":"/svg/mail.svg","link":"mailto:ziqiang_wang_chn@163.com"},"rss":{"icon":"/svg/RSS.svg","link":"https://ohbug.cn/atom.xml"}}}}}}